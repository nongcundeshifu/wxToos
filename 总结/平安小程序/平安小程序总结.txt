1.前期准备
功能划分，功能难点，如果没有思维导图就以原型图编写思维导图。整理功能逻辑点。
根据功能点，设计图，提前准备好项目前期工作：项目目录解构，需要的工具模块lib，公共模板，组件模块，js功能模块（比如登陆功能），公共css（如果有sass）eslint，数据分析

2.编写中
模板和组件问题：
2.1：模板代码的响应式渲染问题，模板代码最好不要使用对象作为数据来源，，直接使用字段即可，因为如果模板代码用于组件中时，外部是无法控制模板代码的样式的，而且，组件中的数据可能无法满足模板代码的数据格式要求，则还需要转换，那么就要设置响应式转换，很麻烦。
2.2：模板代码和组件的css样式（不同的状态，比如颜色，位置等等）的控制，使用一个cssStyle属性来直接设置css行内样式，或者一开始就定义好了所有样式类型，使用属性类控制（感觉这样最好）。如果是位置类型的css布局，那么使用一个view进行嵌套即可。
2.3：组件嵌套，大组件嵌套小组件，那么小组件的状态和数据控制如何传递？一个是通过父元素的属性进行传递，感觉这种方式没什么大问题。而且数据也是响应式。不需要额外的observer。
2.4：将小组件整个合并成大组件，这样一些编写在页面的逻辑可以封装至组件。
2.5：使用组件来使用事件委托。以防止事件绑定太多。


js功能模块问题：划分好功能模块
2.1：数据接口的分离，这样可以进行额外的格式化数据。和统一的信息提示框。
2.2：方法和功能模块的通信要进行分离，使用函数参数进行数据通信，而不是使用this.data，因为使用this.data这样后期维护可能会很麻烦。而且，模块最好别特殊化，不利于重用。
2.3：使用表查询或者在app中设置一个局部的配置表数据，一些页面或者模块接口可以使用统一的数据（比如数据类别，标签之类的），那么在之后的功能删除和添加时，会比较方便。而且，函数中最好也应该使用表数据，而不是直接写其字符串形式，那么在修改时，所有方法都需要修改，如果使用表查询，则可以只修改一处。比如：平安小程序的视频功能显示和隐藏。



异步编程
2.1：错误处理，如果仅仅使用try catch，感觉代码比较多。每个接口都要进行try catch进行错误处理很头疼。其实，可以将try捕获放在接口中，如同node一样，返回一个带err的对象，通过进行判断err属性来判断接口是否请求成功。看喜好吧。如果使用err方法，则约定返回对象为：
	    {
                err: '没有数据了！',   // 信息，可以直接进行打印提示的信息
                errCode: 402,   // 状态码
                data: null,
            };
2.2：如果不是await出现的错误，而是async函数中的其他地方报错了，那么没有任何提示的（如果没有try）。而是会被async，的catch进行捕获。可能比较难调试了。不知道错误出在哪。





























